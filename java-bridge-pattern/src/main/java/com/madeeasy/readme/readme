**Java Bridge Pattern: Separating Abstraction from Implementation**

The Bridge Design Pattern decouples an abstraction from its implementation so that both can vary independently.
 It is used to separate the high-level structure from the low-level implementation details, allowing them to evolve independently.

**Example:**

Here's an example of a bridge pattern in Java that separates the drawing of shapes from the shapes themselves:

   Shape
    /    \
Circle  Rectangle
    |         |
DrawingAPI  DrawingAPI
  /    \       /     \
  Red   Blue  Red   Blue



```java
// Abstraction (Shape)
abstract class Shape {
    protected DrawingAPI drawingAPI;

    protected Shape(DrawingAPI drawingAPI) {
        this.drawingAPI = drawingAPI;
    }

    abstract void draw();
}

// Concrete Abstraction (Circle)
class CircleShape extends Shape {
    private double x, y, radius;

    public CircleShape(double x, double y, double radius, DrawingAPI drawingAPI) {
        super(drawingAPI);
        this.x = x;
        this.y = y;
        this.radius = radius;
    }

    @Override
    void draw() {
        drawingAPI.drawCircle(x, y, radius);
    }
}

// Concrete Abstraction (Rectangle)
class RectangleShape extends Shape {
    private double x1, y1, x2, y2;

    public RectangleShape(double x1, double y1, double x2, double y2, DrawingAPI drawingAPI) {
        super(drawingAPI);
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    @Override
    void draw() {
        drawingAPI.drawRectangle(x1, y1, x2, y2);
    }
}

// Implementor (DrawingAPI)
interface DrawingAPI {
    void drawCircle(double x, double y, double radius);
    void drawRectangle(double x1, double y1, double x2, double y2);
}

// Concrete Implementor (RedrawingAPI)
class RedrawingAPI implements DrawingAPI {
    @Override
    public void drawCircle(double x, double y, double radius) {
        System.out.println("Drawing red circle at (" + x + ", " + y + ") with radius " + radius);
    }

    @Override
    public void drawRectangle(double x1, double y1, double x2, double y2) {
        System.out.println("Drawing red rectangle from (" + x1 + ", " + y1 + ") to (" + x2 + ", " + y2 + ")");
    }
}

// Client Code
public class BridgeExample {
    public static void main(String[] args) {
        DrawingAPI drawingAPI = new RedrawingAPI();

        Shape circle = new CircleShape(1, 2, 3, drawingAPI);
        Shape rectangle = new RectangleShape(1, 2, 4, 5, drawingAPI);

        circle.draw();
        rectangle.draw();
    }
}
```

**How to Identify When to Apply the Bridge Design Pattern:**

1. **Abstraction and Implementation Separation:** When you need to separate abstraction (high-level structure) from
implementation (low-level details).

2. **Complex Hierarchies:** If you have a complex class hierarchy that needs to accommodate multiple dimensions of variability,
the bridge pattern can help avoid a combinatorial explosion of classes.

3. **Future Evolution:** When you expect that both abstraction and implementation will evolve independently,
the bridge pattern allows for easy modifications without affecting each other.

**Where to Apply the Bridge Design Pattern:**

- **GUI Frameworks:** Separating GUI components from their rendering engines.

- **Database Abstractions:** Decoupling high-level database operations from specific database systems.

- **Device Drivers:** Creating device-independent APIs for accessing hardware devices.

- **Network Protocols:** Creating a bridge between high-level protocol logic and specific communication protocols.

- **UI Libraries:** Separating UI components from different UI frameworks.

By applying the Bridge Design Pattern, you can achieve greater flexibility and extensibility in your code by separating
abstraction from implementation, making it easier to manage changes and updates in complex systems.
